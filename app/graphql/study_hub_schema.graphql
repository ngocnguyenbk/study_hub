"""
Autogenerated input type of CreateGroup
"""
input CreateGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  name: String!
}

"""
Autogenerated return type of CreateGroup.
"""
type CreateGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  group: Group
}

type Group {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  members: [User!]!
  name: String
  owner: User!
  ownerId: Int
  updatedAt: ISO8601DateTime!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Autogenerated input type of JoinGroup
"""
input JoinGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  groupId: ID!
}

"""
Autogenerated return type of JoinGroup.
"""
type JoinGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  group: Group
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of LoginUser.
"""
type LoginUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  token: String
  user: User
}

type Mutation {
  createGroup(
    """
    Parameters for CreateGroup
    """
    input: CreateGroupInput!
  ): CreateGroupPayload
  joinGroup(
    """
    Parameters for JoinGroup
    """
    input: JoinGroupInput!
  ): JoinGroupPayload
  loginUser(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUserPayload
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
}

type Query {
  """
  Find a group by ID
  """
  group(id: ID!): Group
  me: User

  """
  Get list of groups
  """
  ownedGroups(limit: Int = 10): [Group!]!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
  passwordConfirmation: String!
}

"""
Autogenerated return type of RegisterUser.
"""
type RegisterUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

type User {
  email: String!
  id: ID!
}
